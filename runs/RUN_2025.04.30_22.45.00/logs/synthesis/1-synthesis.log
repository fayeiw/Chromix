
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openlane/designs/rgb_mixer/src/encoder.v
Parsing SystemVerilog input from `/openlane/designs/rgb_mixer/src/encoder.v' to AST representation.
Generating RTLIL representation for module `\encoder'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /openlane/designs/rgb_mixer/src/pwm.v
Parsing SystemVerilog input from `/openlane/designs/rgb_mixer/src/pwm.v' to AST representation.
Generating RTLIL representation for module `\pwm'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /openlane/designs/rgb_mixer/src/debounce.v
Parsing SystemVerilog input from `/openlane/designs/rgb_mixer/src/debounce.v' to AST representation.
Generating RTLIL representation for module `\debounce'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /openlane/designs/rgb_mixer/src/rgb_mixer.v
Parsing SystemVerilog input from `/openlane/designs/rgb_mixer/src/rgb_mixer.v' to AST representation.
Generating RTLIL representation for module `\rgb_mixer'.
Successfully finished Verilog frontend.

5. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/rgb_mixer/runs/RUN_2025.04.30_22.45.00/tmp/synthesis/hierarchy.dot'.
Dumping module rgb_mixer to page 1.

6. Executing HIERARCHY pass (managing design hierarchy).

6.1. Analyzing design hierarchy..
Top module:  \rgb_mixer
Used module:     \pwm
Used module:     \encoder
Used module:     \debounce

6.2. Analyzing design hierarchy..
Top module:  \rgb_mixer
Used module:     \pwm
Used module:     \encoder
Used module:     \debounce
Removed 0 unused modules.

7. Executing TRIBUF pass.

8. Executing HIERARCHY pass (managing design hierarchy).

8.1. Analyzing design hierarchy..
Top module:  \rgb_mixer
Used module:     \pwm
Used module:     \encoder
Used module:     \debounce

8.2. Analyzing design hierarchy..
Top module:  \rgb_mixer
Used module:     \pwm
Used module:     \encoder
Used module:     \debounce
Removed 0 unused modules.

9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

10. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/openlane/designs/rgb_mixer/src/debounce.v:24$12 in module debounce.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/rgb_mixer/src/debounce.v:12$10 in module debounce.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/rgb_mixer/src/pwm.v:12$5 in module pwm.
Marked 2 switch rules as full_case in process $proc$/openlane/designs/rgb_mixer/src/encoder.v:14$1 in module encoder.
Removed a total of 0 dead cases.

11. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 5 redundant assignments.
Promoted 1 assignment to connection.

12. Executing PROC_INIT pass (extract init attributes).

13. Executing PROC_ARST pass (detect async resets in processes).

14. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~6 debug messages>

15. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\debounce.$proc$/openlane/designs/rgb_mixer/src/debounce.v:24$12'.
     1/2: $2\debounced[0:0]
     2/2: $1\debounced[0:0]
Creating decoders for process `\debounce.$proc$/openlane/designs/rgb_mixer/src/debounce.v:12$10'.
     1/1: $0\state[7:0]
Creating decoders for process `\pwm.$proc$/openlane/designs/rgb_mixer/src/pwm.v:12$5'.
     1/1: $0\counter[7:0]
Creating decoders for process `\encoder.$proc$/openlane/designs/rgb_mixer/src/encoder.v:14$1'.
     1/3: $0\old_b[0:0]
     2/3: $0\old_a[0:0]
     3/3: $0\value[7:0]

16. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\debounce.\debounced' from process `\debounce.$proc$/openlane/designs/rgb_mixer/src/debounce.v:24$12': $auto$proc_dlatch.cc:427:proc_dlatch$69

17. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\debounce.\state' using process `\debounce.$proc$/openlane/designs/rgb_mixer/src/debounce.v:12$10'.
  created $dff cell `$procdff$70' with positive edge clock.
Creating register for signal `\pwm.\counter' using process `\pwm.$proc$/openlane/designs/rgb_mixer/src/pwm.v:12$5'.
  created $dff cell `$procdff$71' with positive edge clock.
Creating register for signal `\encoder.\value' using process `\encoder.$proc$/openlane/designs/rgb_mixer/src/encoder.v:14$1'.
  created $dff cell `$procdff$72' with positive edge clock.
Creating register for signal `\encoder.\old_a' using process `\encoder.$proc$/openlane/designs/rgb_mixer/src/encoder.v:14$1'.
  created $dff cell `$procdff$73' with positive edge clock.
Creating register for signal `\encoder.\old_b' using process `\encoder.$proc$/openlane/designs/rgb_mixer/src/encoder.v:14$1'.
  created $dff cell `$procdff$74' with positive edge clock.

18. Executing PROC_MEMWR pass (convert process memory writes to cells).

19. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\debounce.$proc$/openlane/designs/rgb_mixer/src/debounce.v:24$12'.
Removing empty process `debounce.$proc$/openlane/designs/rgb_mixer/src/debounce.v:24$12'.
Found and cleaned up 1 empty switch in `\debounce.$proc$/openlane/designs/rgb_mixer/src/debounce.v:12$10'.
Removing empty process `debounce.$proc$/openlane/designs/rgb_mixer/src/debounce.v:12$10'.
Found and cleaned up 1 empty switch in `\pwm.$proc$/openlane/designs/rgb_mixer/src/pwm.v:12$5'.
Removing empty process `pwm.$proc$/openlane/designs/rgb_mixer/src/pwm.v:12$5'.
Found and cleaned up 2 empty switches in `\encoder.$proc$/openlane/designs/rgb_mixer/src/encoder.v:14$1'.
Removing empty process `encoder.$proc$/openlane/designs/rgb_mixer/src/encoder.v:14$1'.
Cleaned up 6 empty switches.

20. Executing CHECK pass (checking for obvious problems).
Checking module rgb_mixer...
Checking module debounce...
Checking module pwm...
Checking module encoder...
Found and reported 0 problems.

21. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.
Optimizing module debounce.
<suppressed ~12 debug messages>
Optimizing module pwm.
<suppressed ~1 debug messages>
Optimizing module encoder.
<suppressed ~1 debug messages>

22. Executing FLATTEN pass (flatten design).
Deleting now unused module debounce.
Deleting now unused module pwm.
Deleting now unused module encoder.
<suppressed ~12 debug messages>

23. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 6 unused cells and 144 unused wires.
<suppressed ~7 debug messages>

25. Executing OPT pass (performing simple optimizations).

25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgb_mixer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgb_mixer.
Performed a total of 0 changes.

25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

25.6. Executing OPT_DFF pass (perform DFF optimizations).

25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

25.9. Rerunning OPT passes. (Maybe there is more to do..)

25.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgb_mixer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

25.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgb_mixer.
Performed a total of 0 changes.

25.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

25.13. Executing OPT_DFF pass (perform DFF optimizations).

25.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

25.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

25.16. Finished OPT passes. (There is nothing left to do.)

26. Executing FSM pass (extract and optimize FSM).

26.1. Executing FSM_DETECT pass (finding FSMs in design).

26.2. Executing FSM_EXTRACT pass (extracting FSM from design).

26.3. Executing FSM_OPT pass (simple optimizations of FSMs).

26.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

26.5. Executing FSM_OPT pass (simple optimizations of FSMs).

26.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

26.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

26.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

27. Executing OPT pass (performing simple optimizations).

27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgb_mixer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgb_mixer.
Performed a total of 0 changes.

27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

27.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $flatten\p2.$procdff$71 ($dff) from module rgb_mixer (D = $flatten\p2.$add$/openlane/designs/rgb_mixer/src/pwm.v:19$7_Y, Q = \p2.counter, rval = 8'00000000).
Adding SRST signal on $flatten\p1.$procdff$71 ($dff) from module rgb_mixer (D = $flatten\p1.$add$/openlane/designs/rgb_mixer/src/pwm.v:19$7_Y, Q = \p1.counter, rval = 8'00000000).
Adding SRST signal on $flatten\p0.$procdff$71 ($dff) from module rgb_mixer (D = $flatten\p0.$add$/openlane/designs/rgb_mixer/src/pwm.v:19$7_Y, Q = \p0.counter, rval = 8'00000000).
Adding SRST signal on $flatten\e2.$procdff$74 ($dff) from module rgb_mixer (D = \d6.debounced, Q = \e2.old_b, rval = 1'0).
Adding SRST signal on $flatten\e2.$procdff$73 ($dff) from module rgb_mixer (D = \d5.debounced, Q = \e2.old_a, rval = 1'0).
Adding SRST signal on $flatten\e2.$procdff$72 ($dff) from module rgb_mixer (D = $flatten\e2.$procmux$37_Y, Q = \e2.value, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$80 ($sdff) from module rgb_mixer (D = $flatten\e2.$procmux$37_Y, Q = \e2.value).
Adding SRST signal on $flatten\e1.$procdff$74 ($dff) from module rgb_mixer (D = \d4.debounced, Q = \e1.old_b, rval = 1'0).
Adding SRST signal on $flatten\e1.$procdff$73 ($dff) from module rgb_mixer (D = \d3.debounced, Q = \e1.old_a, rval = 1'0).
Adding SRST signal on $flatten\e1.$procdff$72 ($dff) from module rgb_mixer (D = $flatten\e1.$procmux$37_Y, Q = \e1.value, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$86 ($sdff) from module rgb_mixer (D = $flatten\e1.$procmux$37_Y, Q = \e1.value).
Adding SRST signal on $flatten\e0.$procdff$74 ($dff) from module rgb_mixer (D = \d1.debounced, Q = \e0.old_b, rval = 1'0).
Adding SRST signal on $flatten\e0.$procdff$73 ($dff) from module rgb_mixer (D = \d0.debounced, Q = \e0.old_a, rval = 1'0).
Adding SRST signal on $flatten\e0.$procdff$72 ($dff) from module rgb_mixer (D = $flatten\e0.$procmux$37_Y, Q = \e0.value, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$92 ($sdff) from module rgb_mixer (D = $flatten\e0.$procmux$37_Y, Q = \e0.value).
Adding SRST signal on $flatten\d6.$procdff$70 ($dff) from module rgb_mixer (D = { \enc2_b \d6.state [7:1] }, Q = \d6.state, rval = 8'00000000).
Adding SRST signal on $flatten\d5.$procdff$70 ($dff) from module rgb_mixer (D = { \enc2_a \d5.state [7:1] }, Q = \d5.state, rval = 8'00000000).
Adding SRST signal on $flatten\d4.$procdff$70 ($dff) from module rgb_mixer (D = { \enc1_b \d4.state [7:1] }, Q = \d4.state, rval = 8'00000000).
Adding SRST signal on $flatten\d3.$procdff$70 ($dff) from module rgb_mixer (D = { \enc1_a \d3.state [7:1] }, Q = \d3.state, rval = 8'00000000).
Adding SRST signal on $flatten\d1.$procdff$70 ($dff) from module rgb_mixer (D = { \enc0_b \d1.state [7:1] }, Q = \d1.state, rval = 8'00000000).
Adding SRST signal on $flatten\d0.$procdff$70 ($dff) from module rgb_mixer (D = { \enc0_a \d0.state [7:1] }, Q = \d0.state, rval = 8'00000000).

27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 18 unused cells and 18 unused wires.
<suppressed ~19 debug messages>

27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.
<suppressed ~3 debug messages>

27.9. Rerunning OPT passes. (Maybe there is more to do..)

27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgb_mixer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgb_mixer.
Performed a total of 0 changes.

27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

27.13. Executing OPT_DFF pass (perform DFF optimizations).

27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

27.16. Finished OPT passes. (There is nothing left to do.)

28. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 4) from port B of cell rgb_mixer.$flatten\e0.$procmux$39_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rgb_mixer.$flatten\e0.$procmux$38_CMP0 ($eq).
Removed top 31 bits (of 32) from mux cell rgb_mixer.$flatten\p0.$ternary$/openlane/designs/rgb_mixer/src/pwm.v:22$9 ($mux).
Removed top 1 bits (of 4) from port B of cell rgb_mixer.$flatten\e1.$procmux$39_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rgb_mixer.$flatten\e1.$procmux$38_CMP0 ($eq).
Removed top 31 bits (of 32) from mux cell rgb_mixer.$flatten\p1.$ternary$/openlane/designs/rgb_mixer/src/pwm.v:22$9 ($mux).
Removed top 1 bits (of 4) from port B of cell rgb_mixer.$flatten\e2.$procmux$39_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell rgb_mixer.$flatten\e2.$procmux$38_CMP0 ($eq).
Removed top 31 bits (of 32) from mux cell rgb_mixer.$flatten\p2.$ternary$/openlane/designs/rgb_mixer/src/pwm.v:22$9 ($mux).

29. Executing PEEPOPT pass (run peephole optimizers).

30. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

31. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module rgb_mixer:
  creating $macc model for $flatten\e0.$add$/openlane/designs/rgb_mixer/src/encoder.v:26$3 ($add).
  creating $macc model for $flatten\e0.$sub$/openlane/designs/rgb_mixer/src/encoder.v:28$4 ($sub).
  creating $macc model for $flatten\e1.$add$/openlane/designs/rgb_mixer/src/encoder.v:26$3 ($add).
  creating $macc model for $flatten\e1.$sub$/openlane/designs/rgb_mixer/src/encoder.v:28$4 ($sub).
  creating $macc model for $flatten\e2.$add$/openlane/designs/rgb_mixer/src/encoder.v:26$3 ($add).
  creating $macc model for $flatten\e2.$sub$/openlane/designs/rgb_mixer/src/encoder.v:28$4 ($sub).
  creating $macc model for $flatten\p0.$add$/openlane/designs/rgb_mixer/src/pwm.v:19$7 ($add).
  creating $macc model for $flatten\p1.$add$/openlane/designs/rgb_mixer/src/pwm.v:19$7 ($add).
  creating $macc model for $flatten\p2.$add$/openlane/designs/rgb_mixer/src/pwm.v:19$7 ($add).
  creating $alu model for $macc $flatten\p2.$add$/openlane/designs/rgb_mixer/src/pwm.v:19$7.
  creating $alu model for $macc $flatten\p1.$add$/openlane/designs/rgb_mixer/src/pwm.v:19$7.
  creating $alu model for $macc $flatten\p0.$add$/openlane/designs/rgb_mixer/src/pwm.v:19$7.
  creating $alu model for $macc $flatten\e2.$sub$/openlane/designs/rgb_mixer/src/encoder.v:28$4.
  creating $alu model for $macc $flatten\e2.$add$/openlane/designs/rgb_mixer/src/encoder.v:26$3.
  creating $alu model for $macc $flatten\e1.$sub$/openlane/designs/rgb_mixer/src/encoder.v:28$4.
  creating $alu model for $macc $flatten\e1.$add$/openlane/designs/rgb_mixer/src/encoder.v:26$3.
  creating $alu model for $macc $flatten\e0.$sub$/openlane/designs/rgb_mixer/src/encoder.v:28$4.
  creating $alu model for $macc $flatten\e0.$add$/openlane/designs/rgb_mixer/src/encoder.v:26$3.
  creating $alu model for $flatten\p0.$lt$/openlane/designs/rgb_mixer/src/pwm.v:22$8 ($lt): new $alu
  creating $alu model for $flatten\p1.$lt$/openlane/designs/rgb_mixer/src/pwm.v:22$8 ($lt): new $alu
  creating $alu model for $flatten\p2.$lt$/openlane/designs/rgb_mixer/src/pwm.v:22$8 ($lt): new $alu
  creating $alu cell for $flatten\p2.$lt$/openlane/designs/rgb_mixer/src/pwm.v:22$8: $auto$alumacc.cc:485:replace_alu$105
  creating $alu cell for $flatten\p1.$lt$/openlane/designs/rgb_mixer/src/pwm.v:22$8: $auto$alumacc.cc:485:replace_alu$116
  creating $alu cell for $flatten\p0.$lt$/openlane/designs/rgb_mixer/src/pwm.v:22$8: $auto$alumacc.cc:485:replace_alu$121
  creating $alu cell for $flatten\e0.$add$/openlane/designs/rgb_mixer/src/encoder.v:26$3: $auto$alumacc.cc:485:replace_alu$126
  creating $alu cell for $flatten\e0.$sub$/openlane/designs/rgb_mixer/src/encoder.v:28$4: $auto$alumacc.cc:485:replace_alu$129
  creating $alu cell for $flatten\e1.$add$/openlane/designs/rgb_mixer/src/encoder.v:26$3: $auto$alumacc.cc:485:replace_alu$132
  creating $alu cell for $flatten\e1.$sub$/openlane/designs/rgb_mixer/src/encoder.v:28$4: $auto$alumacc.cc:485:replace_alu$135
  creating $alu cell for $flatten\e2.$add$/openlane/designs/rgb_mixer/src/encoder.v:26$3: $auto$alumacc.cc:485:replace_alu$138
  creating $alu cell for $flatten\e2.$sub$/openlane/designs/rgb_mixer/src/encoder.v:28$4: $auto$alumacc.cc:485:replace_alu$141
  creating $alu cell for $flatten\p0.$add$/openlane/designs/rgb_mixer/src/pwm.v:19$7: $auto$alumacc.cc:485:replace_alu$144
  creating $alu cell for $flatten\p1.$add$/openlane/designs/rgb_mixer/src/pwm.v:19$7: $auto$alumacc.cc:485:replace_alu$147
  creating $alu cell for $flatten\p2.$add$/openlane/designs/rgb_mixer/src/pwm.v:19$7: $auto$alumacc.cc:485:replace_alu$150
  created 12 $alu and 0 $macc cells.

32. Executing SHARE pass (SAT-based resource sharing).

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.
<suppressed ~3 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgb_mixer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgb_mixer.
Performed a total of 0 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 3 unused cells and 6 unused wires.
<suppressed ~4 debug messages>

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

33.9. Rerunning OPT passes. (Maybe there is more to do..)

33.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgb_mixer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

33.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgb_mixer.
Performed a total of 0 changes.

33.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

33.13. Executing OPT_DFF pass (perform DFF optimizations).

33.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

33.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

33.16. Finished OPT passes. (There is nothing left to do.)

34. Executing MEMORY pass.

34.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

34.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

34.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

34.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

34.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

34.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

34.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

34.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

34.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

34.10. Executing MEMORY_COLLECT pass (generating $mem cells).

35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

36. Executing OPT pass (performing simple optimizations).

36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.
<suppressed ~12 debug messages>

36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

36.3. Executing OPT_DFF pass (perform DFF optimizations).

36.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

36.5. Finished fast OPT passes.

37. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

38.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgb_mixer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

38.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgb_mixer.
Performed a total of 0 changes.

38.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

38.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $mux $flatten\e0.$procmux$37 in front of them:
        $auto$alumacc.cc:485:replace_alu$129
        $auto$alumacc.cc:485:replace_alu$126

    Found cells that share an operand and can be merged by moving the $mux $flatten\e1.$procmux$37 in front of them:
        $auto$alumacc.cc:485:replace_alu$135
        $auto$alumacc.cc:485:replace_alu$132

    Found cells that share an operand and can be merged by moving the $mux $flatten\e2.$procmux$37 in front of them:
        $auto$alumacc.cc:485:replace_alu$141
        $auto$alumacc.cc:485:replace_alu$138

38.7. Executing OPT_DFF pass (perform DFF optimizations).

38.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 0 unused cells and 18 unused wires.
<suppressed ~1 debug messages>

38.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.
<suppressed ~6 debug messages>

38.10. Rerunning OPT passes. (Maybe there is more to do..)

38.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgb_mixer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

38.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgb_mixer.
    Consolidated identical input bits for $mux cell $auto$opt_share.cc:241:merge_operators$156:
      Old ports: A=8'11111111, B=8'00000001, Y=$auto$rtlil.cc:2496:Mux$157
      New ports: A=1'1, B=1'0, Y=$auto$rtlil.cc:2496:Mux$157 [1]
      New connections: { $auto$rtlil.cc:2496:Mux$157 [7:2] $auto$rtlil.cc:2496:Mux$157 [0] } = { $auto$rtlil.cc:2496:Mux$157 [1] $auto$rtlil.cc:2496:Mux$157 [1] $auto$rtlil.cc:2496:Mux$157 [1] $auto$rtlil.cc:2496:Mux$157 [1] $auto$rtlil.cc:2496:Mux$157 [1] $auto$rtlil.cc:2496:Mux$157 [1] 1'1 }
    Consolidated identical input bits for $mux cell $auto$opt_share.cc:241:merge_operators$163:
      Old ports: A=8'11111111, B=8'00000001, Y=$auto$rtlil.cc:2496:Mux$164
      New ports: A=1'1, B=1'0, Y=$auto$rtlil.cc:2496:Mux$164 [1]
      New connections: { $auto$rtlil.cc:2496:Mux$164 [7:2] $auto$rtlil.cc:2496:Mux$164 [0] } = { $auto$rtlil.cc:2496:Mux$164 [1] $auto$rtlil.cc:2496:Mux$164 [1] $auto$rtlil.cc:2496:Mux$164 [1] $auto$rtlil.cc:2496:Mux$164 [1] $auto$rtlil.cc:2496:Mux$164 [1] $auto$rtlil.cc:2496:Mux$164 [1] 1'1 }
    Consolidated identical input bits for $mux cell $auto$opt_share.cc:241:merge_operators$170:
      Old ports: A=8'11111111, B=8'00000001, Y=$auto$rtlil.cc:2496:Mux$171
      New ports: A=1'1, B=1'0, Y=$auto$rtlil.cc:2496:Mux$171 [1]
      New connections: { $auto$rtlil.cc:2496:Mux$171 [7:2] $auto$rtlil.cc:2496:Mux$171 [0] } = { $auto$rtlil.cc:2496:Mux$171 [1] $auto$rtlil.cc:2496:Mux$171 [1] $auto$rtlil.cc:2496:Mux$171 [1] $auto$rtlil.cc:2496:Mux$171 [1] $auto$rtlil.cc:2496:Mux$171 [1] $auto$rtlil.cc:2496:Mux$171 [1] 1'1 }
  Optimizing cells in module \rgb_mixer.
Performed a total of 3 changes.

38.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

38.14. Executing OPT_SHARE pass.

38.15. Executing OPT_DFF pass (perform DFF optimizations).

38.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

38.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.
<suppressed ~3 debug messages>

38.18. Rerunning OPT passes. (Maybe there is more to do..)

38.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgb_mixer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

38.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgb_mixer.
Performed a total of 0 changes.

38.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

38.22. Executing OPT_SHARE pass.

38.23. Executing OPT_DFF pass (perform DFF optimizations).

38.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

38.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

38.26. Finished OPT passes. (There is nothing left to do.)

39. Executing TECHMAP pass (map to technology primitives).

39.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

39.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $sdff.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $dlatch.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~647 debug messages>

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.
<suppressed ~336 debug messages>

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
<suppressed ~87 debug messages>
Removed a total of 29 cells.

40.3. Executing OPT_DFF pass (perform DFF optimizations).

40.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 107 unused cells and 405 unused wires.
<suppressed ~108 debug messages>

40.5. Finished fast OPT passes.

41. Executing ABC pass (technology mapping using ABC).

41.1. Extracting gate netlist of module `\rgb_mixer' to `<abc-temp-dir>/input.blif'..
Extracted 518 gates and 626 wires to a netlist network with 108 inputs and 66 outputs.

41.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

41.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        6
ABC RESULTS:              NAND cells:       28
ABC RESULTS:               AND cells:       21
ABC RESULTS:              XNOR cells:       11
ABC RESULTS:                OR cells:       60
ABC RESULTS:             ORNOT cells:       45
ABC RESULTS:               NOR cells:       19
ABC RESULTS:            ANDNOT cells:      140
ABC RESULTS:               XOR cells:       74
ABC RESULTS:        internal signals:      452
ABC RESULTS:           input signals:      108
ABC RESULTS:          output signals:       66
Removing temp directory.

42. Executing OPT pass (performing simple optimizations).

42.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

42.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

42.3. Executing OPT_DFF pass (perform DFF optimizations).

42.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 0 unused cells and 421 unused wires.
<suppressed ~1 debug messages>

42.5. Finished fast OPT passes.

43. Executing HIERARCHY pass (managing design hierarchy).

43.1. Analyzing design hierarchy..
Top module:  \rgb_mixer

43.2. Analyzing design hierarchy..
Top module:  \rgb_mixer
Removed 0 unused modules.

44. Printing statistics.

=== rgb_mixer ===

   Number of wires:                450
   Number of wire bits:            653
   Number of public wires:          86
   Number of public wire bits:     212
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                512
     $_ANDNOT_                     140
     $_AND_                         21
     $_DLATCH_N_                     6
     $_NAND_                        28
     $_NOR_                         19
     $_NOT_                          6
     $_ORNOT_                       45
     $_OR_                          60
     $_SDFFE_PP0P_                  24
     $_SDFF_PP0_                    78
     $_XNOR_                        11
     $_XOR_                         74

45. Executing CHECK pass (checking for obvious problems).
Checking module rgb_mixer...
Found and reported 0 problems.

46. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/rgb_mixer/runs/RUN_2025.04.30_22.45.00/tmp/synthesis/post_techmap.dot'.
Dumping module rgb_mixer to page 1.

47. Executing SHARE pass (SAT-based resource sharing).

48. Executing OPT pass (performing simple optimizations).

48.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

48.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

48.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgb_mixer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

48.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgb_mixer.
Performed a total of 0 changes.

48.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgb_mixer'.
Removed a total of 0 cells.

48.6. Executing OPT_DFF pass (perform DFF optimizations).

48.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..

48.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgb_mixer.

48.9. Finished OPT passes. (There is nothing left to do.)

49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 0 unused cells and 51 unused wires.
<suppressed ~51 debug messages>

50. Printing statistics.

=== rgb_mixer ===

   Number of wires:                399
   Number of wire bits:            560
   Number of public wires:          35
   Number of public wire bits:     119
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                512
     $_ANDNOT_                     140
     $_AND_                         21
     $_DLATCH_N_                     6
     $_NAND_                        28
     $_NOR_                         19
     $_NOT_                          6
     $_ORNOT_                       45
     $_OR_                          60
     $_SDFFE_PP0P_                  24
     $_SDFF_PP0_                    78
     $_XNOR_                        11
     $_XOR_                         74

mapping tbuf

51. Executing TECHMAP pass (map to technology primitives).

51.1. Executing Verilog-2005 frontend: /home/aanuoluwa/asic_tools/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/aanuoluwa/asic_tools/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

51.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

52. Executing SIMPLEMAP pass (map simple cells to gate primitives).

53. Executing TECHMAP pass (map to technology primitives).

53.1. Executing Verilog-2005 frontend: /home/aanuoluwa/asic_tools/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/aanuoluwa/asic_tools/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

53.2. Continuing TECHMAP pass.
Using template \$_DLATCH_N_ for cells of type $_DLATCH_N_.
No more expansions possible.
<suppressed ~10 debug messages>

54. Executing SIMPLEMAP pass (map simple cells to gate primitives).

55. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

55.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\rgb_mixer':
  mapped 102 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

56. Printing statistics.

=== rgb_mixer ===

   Number of wires:                543
   Number of wire bits:            704
   Number of public wires:          35
   Number of public wire bits:     119
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                638
     $_ANDNOT_                     140
     $_AND_                         21
     $_MUX_                        126
     $_NAND_                        28
     $_NOR_                         19
     $_NOT_                          6
     $_ORNOT_                       45
     $_OR_                          60
     $_XNOR_                        11
     $_XOR_                         74
     sky130_fd_sc_hd__dfxtp_2      102
     sky130_fd_sc_hd__dlxtn_1        6

[INFO]: USING STRATEGY AREA 0

57. Executing ABC pass (technology mapping using ABC).

57.1. Extracting gate netlist of module `\rgb_mixer' to `/tmp/yosys-abc-u69hDs/input.blif'..
Extracted 530 gates and 646 wires to a netlist network with 115 inputs and 117 outputs.

57.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-u69hDs/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-u69hDs/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-u69hDs/input.blif 
ABC: + read_lib -w /openlane/designs/rgb_mixer/runs/RUN_2025.04.30_22.45.00/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.15 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/rgb_mixer/runs/RUN_2025.04.30_22.45.00/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.20 sec
ABC: Memory =    9.54 MB. Time =     0.20 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/rgb_mixer/runs/RUN_2025.04.30_22.45.00/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/rgb_mixer/runs/RUN_2025.04.30_22.45.00/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000.0 
ABC: Current delay (2375.08 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    445 ( 24.0 %)   Cap = 12.1 ff (  5.3 %)   Area =     3358.22 ( 76.0 %)   Delay =  2634.64 ps  (  6.7 %)               
ABC: Path  0 --      34 : 0    1 pi                         A =   0.00  Df =  12.2   -7.3 ps  S =  22.9 ps  Cin =  0.0 ff  Cout =   3.4 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     388 : 3    3 sky130_fd_sc_hd__mux2_2    A =  11.26  Df = 324.1  -93.5 ps  S =  56.7 ps  Cin =  2.3 ff  Cout =   5.8 ff  Cmax = 297.6 ff  G =  245  
ABC: Path  2 --     390 : 2    1 sky130_fd_sc_hd__and2b_2   A =   8.76  Df = 523.5  -14.8 ps  S =  33.9 ps  Cin =  1.6 ff  Cout =   2.2 ff  Cmax = 310.4 ff  G =  132  
ABC: Path  3 --     391 : 1    8 sky130_fd_sc_hd__buf_1     A =   3.75  Df = 851.5 -132.7 ps  S = 409.8 ps  Cin =  2.1 ff  Cout =  34.6 ff  Cmax = 130.0 ff  G = 1598  
ABC: Path  4 --     413 : 2    3 sky130_fd_sc_hd__xnor2_2   A =  16.27  Df =1116.9 -176.5 ps  S = 182.5 ps  Cin =  8.5 ff  Cout =   9.5 ff  Cmax = 121.8 ff  G =  107  
ABC: Path  5 --     419 : 5    3 sky130_fd_sc_hd__a311o_2   A =  11.26  Df =1554.6 -260.2 ps  S =  92.7 ps  Cin =  2.3 ff  Cout =  13.8 ff  Cmax = 298.5 ff  G =  571  
ABC: Path  6 --     433 : 5    4 sky130_fd_sc_hd__a221oi_2  A =  15.01  Df =1898.6 -362.7 ps  S = 336.6 ps  Cin =  4.5 ff  Cout =  13.1 ff  Cmax =  96.1 ff  G =  278  
ABC: Path  7 --     443 : 5    1 sky130_fd_sc_hd__a2111oi_2 A =  15.01  Df =2024.0  -89.8 ps  S = 296.5 ps  Cin =  4.6 ff  Cout =   4.6 ff  Cmax =  56.8 ff  G =   94  
ABC: Path  8 --     444 : 5    1 sky130_fd_sc_hd__a311oi_2  A =  15.01  Df =2634.6 -334.2 ps  S = 674.6 ps  Cin =  4.3 ff  Cout =  33.4 ff  Cmax =  84.2 ff  G =  769  
ABC: Start-point = pi33 (\e0.old_b).  End-point = po46 ($auto$rtlil.cc:2607:MuxGate$2123).
ABC: + print_stats -m 
ABC: netlist                       : i/o =  115/  117  lat =    0  nd =   445  edge =   1056  area =3358.50  delay =10.00  lev = 10
ABC: + write_blif /tmp/yosys-abc-u69hDs/output.blif 

57.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o41a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__a221oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       24
ABC RESULTS:   sky130_fd_sc_hd__a2111oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a311oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__nor3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       83
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       74
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       26
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       31
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       23
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       29
ABC RESULTS:        internal signals:      414
ABC RESULTS:           input signals:      115
ABC RESULTS:          output signals:      117
Removing temp directory.

58. Executing SETUNDEF pass (replace undef values with defined constants).

59. Executing HILOMAP pass (mapping to constant drivers).

60. Executing SPLITNETS pass (splitting up multi-bit signals).

61. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgb_mixer..
Removed 0 unused cells and 703 unused wires.
<suppressed ~1 debug messages>

62. Executing INSBUF pass (insert buffer cells for connected wires).

63. Executing CHECK pass (checking for obvious problems).
Checking module rgb_mixer...
Warning: Wire rgb_mixer.\pwm2_out is used but has no driver.
Warning: Wire rgb_mixer.\pwm1_out is used but has no driver.
Warning: Wire rgb_mixer.\pwm0_out is used but has no driver.
Found and reported 3 problems.

64. Printing statistics.

=== rgb_mixer ===

   Number of wires:                561
   Number of wire bits:            561
   Number of public wires:         119
   Number of public wire bits:     119
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                553
     sky130_fd_sc_hd__a2111oi_2      2
     sky130_fd_sc_hd__a211o_2        5
     sky130_fd_sc_hd__a21o_2         7
     sky130_fd_sc_hd__a21oi_2       29
     sky130_fd_sc_hd__a221oi_2       2
     sky130_fd_sc_hd__a22o_2         7
     sky130_fd_sc_hd__a311o_2        3
     sky130_fd_sc_hd__a311oi_2       2
     sky130_fd_sc_hd__a31o_2         7
     sky130_fd_sc_hd__and2_2        74
     sky130_fd_sc_hd__and2b_2       13
     sky130_fd_sc_hd__and3_2        26
     sky130_fd_sc_hd__and3b_2        1
     sky130_fd_sc_hd__and4_2         7
     sky130_fd_sc_hd__buf_1         83
     sky130_fd_sc_hd__dfxtp_2      102
     sky130_fd_sc_hd__dlxtn_1        6
     sky130_fd_sc_hd__inv_2         24
     sky130_fd_sc_hd__mux2_2         6
     sky130_fd_sc_hd__nand2_2        7
     sky130_fd_sc_hd__nor2_2        31
     sky130_fd_sc_hd__nor3_2         3
     sky130_fd_sc_hd__nor3b_2        1
     sky130_fd_sc_hd__o211a_2        3
     sky130_fd_sc_hd__o211ai_2       3
     sky130_fd_sc_hd__o21a_2        23
     sky130_fd_sc_hd__o21ai_2        6
     sky130_fd_sc_hd__o21ba_2        8
     sky130_fd_sc_hd__o221a_2        6
     sky130_fd_sc_hd__o22a_2         6
     sky130_fd_sc_hd__o22ai_2        3
     sky130_fd_sc_hd__o41a_2         2
     sky130_fd_sc_hd__or2_2         13
     sky130_fd_sc_hd__or2b_2         5
     sky130_fd_sc_hd__or4_2         15
     sky130_fd_sc_hd__xnor2_2       10
     sky130_fd_sc_hd__xor2_2         2

   Chip area for module '\rgb_mixer': 5617.888000

65. Executing Verilog backend.
Dumping module `\rgb_mixer'.

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: 5ad642363b, CPU: user 1.57s system 0.04s, MEM: 30.12 MB peak
Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os)
Time spent: 50% 2x abc (1 sec), 11% 22x opt_expr (0 sec), ...
